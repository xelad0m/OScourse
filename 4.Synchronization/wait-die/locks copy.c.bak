#include "locks.h"
#include "thread.h"                                  // preempt_disable, preempt_enable

/* spin lock */

void lock_init(struct lock *lock)
{
	/* работает по принципу запрета планировщику переключаться с данной задачи
	без непосредственно spin loop. Хард вариант, блокирует все наглухо,
	но и дедлок зато невозможен (просто dead максимум) */
	(void) lock;
}

void lock(struct lock *lock)
{
	(void) lock;
	preempt_disable();											// планировкщик не сможет переключиться с задачи, вызвавшей такой лок
}

void unlock(struct lock *lock)
{
	(void) lock;
	preempt_enable();											// планировкщик сможет дальше крутить карусель задач
}



/* spin rw ticket lock */
                                        
void ticket_spinlock_init(struct rwlock *lock) {
    atomic_init(&lock->ticket, 0);
    atomic_init(&lock->write, 0);
    atomic_init(&lock->read, 0);
}

void read_lock(struct rwlock *lock) {
	if (TRACE) printf("(SPINLOCK) ticket spinlok read_lock()\n");
    const unsigned ticket = atomic_fetch_add(&lock->ticket, 1); // получаем очередной "номерок" и двигаем очередь на 1
    while (atomic_load(&lock->read) != ticket)                  // ждем пока наш "талончик" не вызовут
        __asm__("pause");                                       
    atomic_store(&lock->read, ticket + 1);                      // до входа в крит. сразу двигаем очередь читателей (fetch_add тоже ОК)
}                                                               // следующий читатель поступит также

void read_unlock(struct rwlock *lock) {
	if (TRACE) printf("(SPINLOCK) ticket spinlok read_unlock()\n");
    atomic_fetch_add(&lock->write, 1);                          // только при выходе из крит.обл. продвигаем очередь писателей
}

void write_lock(struct rwlock *lock) {
	if (TRACE) printf("(SPINLOCK) ticket spinlok write_lock()\n");
    const unsigned ticket = atomic_fetch_add(&lock->ticket, 1); // получаем очередной "талончик"
    while (atomic_load(&lock->write) != ticket)                 // ждем пока наш "талончик" не вызовут
        __asm__("pause");                                    
}                                                               // читатели и другие писатели войти не смогут

void write_unlock(struct rwlock *lock) {
	if (TRACE) printf("(SPINLOCK) ticket spinlok write_unlock()\n");
    atomic_fetch_add(&lock->read, 1);                           // атомарно меняем "талончик" в очереди
    atomic_fetch_add(&lock->write, 1);                          // атомарно меняем "талончик" в очереди
}


/* mutex */

void mutex_init(struct mutex *mutex)
{
	lock_init(&mutex->lock);
	list_init(&mutex->wait);									// пустой список ожидающих этой блокировки
	mutex->owner = 0;											// текущий владелец (для которого работа разрешена)
}

void mutex_lock(struct mutex *mutex)
{
	struct thread *me = thread_current();
	
	lock(&mutex->lock);
	if (!mutex->owner) {
		mutex->owner = me;
		unlock(&mutex->lock);
		if (DEBUG) printf("[Mutex] IN mutex_lock() - set me (id:%d) as owner of %p\n", me->id, (void*)mutex);
		return;
	}

	while (mutex->owner != me) {
		struct mutex_wait wait;
		
		if (DEBUG) printf("[Mutex] IN mutex_lock() - set me BLOCKED\n");

		wait.thread = me;								// новый элемент в список ожидающих разблокировки данного мьютекса
		list_add_tail(&wait.ll, &mutex->wait);			// добавить текущий поток в конец очереди ожидающих разблокировки 
		thread_block();									// заблокировать поток (поставить статус заблокирован), карусель будет его пропускать
		unlock(&mutex->lock);							// разблокировать 

		schedule();

		lock(&mutex->lock);
		list_del(&wait.ll);
	}
	unlock(&mutex->lock);
}

void mutex_unlock(struct mutex *mutex)
{	
	if (DEBUG) printf("[Mutex] IN mutex_unlock()\n");
	lock(&mutex->lock);
	if (!list_empty(&mutex->wait)) {
		struct mutex_wait *wait = (struct mutex_wait *)mutex->wait.next;

		if (DEBUG) printf("[Mutex] OUT mutex_unlock() - mtx->owner set to next(id:%d)\n", wait->thread->id);
		/* wake up the next thread in the queue */
		mutex->owner = wait->thread;
		thread_wake(wait->thread);
	} else {
		mutex->owner = 0;
		if (DEBUG) printf("[Mutex] OUT mutex_unlock() - mtx->owner set to 0 (idle thread)\n");
	}
	unlock(&mutex->lock);
}


/* condition variable */

/* generic locks - преобразуют тип блокировки (спин <-> мьютекс), чтоб сохранить 
конкретный лок внутрь condition variable и единообразно с ним работать. Все 
static, чисто обертки для внутренних нужд модуля, в заголовок не идет.
Да это ж классы без С++ (методы с данными в одной структуре)! Круто */
struct generic_lock {
	void (*lock)(struct generic_lock *);		// методы в структуру
	void (*unlock)(struct generic_lock *);		// понятно, классов то в Си нет
};

struct generic_mutex {
	struct generic_lock lock;
	struct mutex *mutex;
};

static void generic_mutex_lock(struct generic_lock *lock) {
	struct generic_mutex *mutex = (struct generic_mutex *)lock;
	mutex_lock(mutex->mutex);
}

static void generic_mutex_unlock(struct generic_lock *lock) {
	struct generic_mutex *mutex = (struct generic_mutex *)lock;
	mutex_unlock(mutex->mutex);
}

struct generic_spinlock {
	struct generic_lock lock;
	struct lock *spin;
};

static void generic_spin_lock(struct generic_lock *lock_) {
	struct generic_spinlock *spin = (struct generic_spinlock *)lock_;	// вот где перекрытие имен мешает lock lock lock 
	lock(spin->spin);
}

static void generic_spin_unlock(struct generic_lock *lock) {
	struct generic_spinlock *spin = (struct generic_spinlock *)lock;
	unlock(spin->spin);
}

// static void generic_spin_lock_int(struct generic_lock *lock) {
// 	struct generic_spinlock *spin = (struct generic_spinlock *)lock;
// 	lock_int_save(spin->spin);
// }

// static void generic_spin_unlock_int(struct generic_lock *lock) {
// 	struct generic_spinlock *spin = (struct generic_spinlock *)lock;
// unlock_int_restore(spin->spin, 1);
// }

/* --- cond.var --- */
void condition_init(struct condition *cv) {
	lock_init(&cv->lock);
	list_init(&cv->wait);
}

static void __wait(struct condition *cv, struct generic_lock *out_lock) {	
	/* метод работает с разными типами локов, ниже к нему обертки */
	struct thread *me = thread_current();
	struct condition_wait wait;
	if (DEBUG) printf("[CondVar] IN __wait() going to BLOCK me (id:%d)\n", me->id);
	lock(&cv->lock);										// внутренний лок, чтоб безопасно править очередь
	wait.thread = me;
	list_add_tail(&wait.ll, &cv->wait);						// поток, дошедший досюда пишется в конец очереди ожидающих на cv
	thread_block();											// а для планировщика, помечается как заблокированный (время ЦПУ не давать)
	out_lock->unlock(out_lock);								// отпускаем внешний лок (который держит клиенский поток)
	unlock(&cv->lock);										// отпускаем внутренний лок (можно и позже по идее?)

	schedule();												// потыкать планировщик, пусть зовет следующего

	out_lock->lock(out_lock);								// блокируем внешний лок
}

void wait_spin(struct condition *cv, struct lock *lock) {
	/* этот на спинлоке (в моем случае - ненастоящем) держит блокировку */
	struct generic_spinlock l = {							// конкретный объект лока, на который настроена cv
		{ &generic_spin_lock, &generic_spin_unlock },		// инициализируется стат.методами
		lock												// сам объект тока
	};
	
	if (DEBUG) printf("[CondVar] IN wait_spin() going to __wait()\n");
	__wait(cv, &l.lock);									
}

// void condition_wait_spin_int(struct condition *cv, struct spinlock *lock)
// {
// 	struct generic_spinlock l = {
// 		{ &generic_spin_lock_int, &generic_spin_unlock_int },
// 		lock
// 	};

// 	__wait(cv, &l.lock);									// спинлок с запретом прерываний (тоже мне не надо такого)
// }

void wait(struct condition *cv, struct mutex *lock) {
	/* блокировка на мьютексе */
	struct generic_mutex l = {
		{ &generic_mutex_lock, &generic_mutex_unlock },
		lock
	};

	if (DEBUG) printf("[CondVar] IN wait() going to __wait()\n");
	__wait(cv, &l.lock);									
}


void notify_one(struct condition *cv) {
	// const int enabled = spin_lock_int_save(&cv->lock);	// переывания, тут они не используются
	// if (DEBUG) printf("[CondVar] IN notify_one() going to WAKE next waiting on cv if it exists\n");
	if (!list_empty(&cv->wait)) {							// если есть потоки, ожидающие на cv
		struct condition_wait *wait =
					(struct condition_wait *)cv->wait.next; // следующий ожидающий
		list_del(&wait->ll);								// удалить его из списка
		thread_wake(wait->thread);							// сказать планировщику, что можно давать время на ЦПУ
	}
	// spin_unlock_int_restore(&cv->lock, enabled);
}

void notify_all(struct condition *cv) {
	if (DEBUG) printf("[CondVar] IN notify_all() going to WAKE all waiting on cv\n");
	
	// const int enabled = spin_lock_int_save(&cv->lock);
	struct list_head list;									// новый список (пустой)
	struct list_head *head = &list;
	list_init(&list);										// просто новая переменная для нашего списка ожидающих на cv
	list_splice(&cv->wait, &list);							// вот зачем этот сплайс (все равно хз зачем так)
	// spin_unlock_int_restore(&cv->lock, enabled);
	for (struct list_head *ptr = head->next; ptr != head; ) {
		struct condition_wait *wait = (struct condition_wait *)ptr;

		ptr = ptr->next;									// проходим так по всему списку 
		thread_wake(wait->thread);							// и буди всех (почему именно так через одно место проходить хз)
	}
}


/* wait-die locking system */
// struct wdlock {
// 	struct wdlock *next;
// 	const struct wdlock_ctx *owner;							// владелец этой блокировки
// 	struct mutex lock;
// 	struct condition cv;
// };

// struct wdlock_ctx {
// 	unsigned long long timestamp;
// 	struct wdlock *locks;									// список захваченных блокировок
// };

void wdlock_ctx_init(struct wdlock_ctx *ctx)
{
	static atomic_ullong next = 0;	

	ctx->timestamp = atomic_fetch_add(&next, 1) + 1;		// атомик обеспечивает уникальность 
	ctx->locks = 0; //NULL
	lock_init(&ctx->ctxlock);
}

void wdlock_init(struct wdlock *lock)
{
	mutex_init(&lock->lock);
	condition_init(&lock->cv);
	lock->owner = 0; 	// NULL
	lock->next = 0; 	// NULL
	if (DEBUG) printf("[WD_LOCK] in wdlock_init() owner:%p next: %p\n", lock->owner, lock->next);
}

int wdlock_lock(struct wdlock *l, struct wdlock_ctx *ctx)
{
	// asm("int $3");
	mutex_lock(&l->lock);									// захватываем блокировку (лок wdlocka)
    struct thread *me = thread_current();
	if (DEBUG) printf("[WD_LOCK] in wdlock_lock() id:%d ts: %lld\n", me->id, ctx->timestamp);
	int repeat_block = 0;										// флаг повторной блокировки
	// lock(&ctx->ctxlock);										// защита изменения констекста (списка блокировок)
	if (!l->owner) {											// если никто не захватил еще
		// mutex_lock(&l->lock);									// захватываем блокировку (лок wdlocka)
		if (DEBUG) printf("[WD_LOCK] in wdlock_lock() owner:%p my TS: %lld\n", l->owner, ctx->timestamp);
		l->owner = ctx;											// пишем себя владельцем (имеет значение только таймстемп)

		struct wdlock *last = ctx->locks;						// указатель на список блокировок контекста
		if (!last) {
			if (DEBUG) printf("[WD_LOCK] owned my first wdlock\n");
			ctx->locks = l;
		} else {
			if (DEBUG) printf("[WD_LOCK] my NOT first wdloc\n");
			while (last->next) {  								// останавливаемся на последней в списке 
				if (DEBUG) printf("owned\n");
				last = last->next;								// дошли до конца списка блокировок
				if (last == l) {
					repeat_block = 1;							// попытка повторно захватить блокировку - это нам может все испортить
					break;										
				}
			}
			if (!repeat_block) last->next = l;					// последнему по указателю next пишем захваченную блокировку (если уже не включали ранее)
		}
		// unlock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
		mutex_unlock(&l->lock);
		return 1;												// блокировка захвачена (двигаемся дальше по алгоритму)
	}
	else if (ctx->timestamp < l->owner->timestamp) {			// если мой таймстемп меньше (создан раньше, но как то так не успел во-время захватить блокировку)
		if (DEBUG) printf("[WD_LOCK] in wdlock_lock() owner:%p my TS: %lld lock TS: %lld\n -> WAIT", l->owner, ctx->timestamp, l->owner->timestamp);	
		// asm("int $3");
		wait(&l->cv, &l->lock);									// wait (!)	на выходе - захваченная блокировка &l->lock
		l->owner = ctx;
		// unlock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
		mutex_unlock(&l->lock);
		return 1;												
	}
	else if (ctx->timestamp >= l->owner->timestamp){
		if (DEBUG) printf("[WD_LOCK] in wdlock_lock() owner:%p my TS: %lld lock TS: %lld -> FAIL\n", l->owner, ctx->timestamp, l->owner->timestamp);	
		// unlock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
		mutex_unlock(&l->lock);	
		return 0;												// die
	}

	mutex_unlock(&l->lock);										// сюда мы уже по идее никак не попадем
	// unlock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
	return 0;													// die
}

void wdlock_unlock(struct wdlock_ctx *ctx)
{
	// asm("int $3");
	// lock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
	struct wdlock *curr = ctx->locks;								// 
	if (DEBUG) printf("[WD_LOCK] in wdlock_unlock() ctx->locks: %p\n", curr);

	if (curr) {
		// mutex_unlock(&curr->lock);									// разблокировать лок каждого wdlock-a
		curr->owner = 0;											// обнулить владельца wdlocka (NULL)
		notify_all(&curr->cv);
		struct wdlock *next = curr->next;							// два указателя, чтобы обнулять next 
		while (next) {												// пройти по списку захваченных блокировок
			// mutex_unlock(&next->lock);								// разблокировать лок каждого wdlock-a
			notify_all(&next->cv);
			next->owner = 0;										// обнулить владельца wdlocka (NULL)
			next = next->next;										// следующий
			curr->next = 0;											// расцепляем список
			curr = next;
		}
	}

	ctx->locks = 0; 												// NULL
	// unlock(&ctx->ctxlock);									// защита изменения констекста (списка блокировок)
}

// dummy interrupt on/off switchers
int local_int_save() { return 0; }
void local_int_restore(const int unused) {}
