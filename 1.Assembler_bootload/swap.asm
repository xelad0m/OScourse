.text
.global main
main:
    movq %rsp, %rbp #for correct debugging
 
    //Напишите код, который обменивает значения в регистрах RSI и RDX. 
    //Т. е. если перед выполнением вашего кода в регистре RSI хранится число 1, 
    //а в регистре RDX хранится число 2, то после выполнения кода в регистре RSI 
    //должно храниться число 2, а в регистре RDX число 1.
    //Вам разрешено пользоваться следующими регистрами общего 
    //назначения: RAX, RBX, RCX, RDX, RBP, RDI, RSI, R8 - R15.
    //
    //sudo apt install gcc-multilib g++-multilib libc6-dev-i386
    
    
    // testing sample
    movq $1, %RSI
    movq $2, %RDX
    // через 3й регистр
    movq %RSI, %R8
    movq %RDX, %RSI
    movq %R8, %RDX
    
    
    // testing sample
    movq $1, %RSI
    movq $2, %RDX
    // ксор
    xor %rdx, %rsi
    xor %rsi, %rdx
    xor %rdx, %rsi
    
    
    // testing sample
    movq $1, %RSI
    movq $2, %RDX
    // инструкция xchgp
    xchgq %rsi, %rdx
    
    
    // testing sample
    movq $1, %RSI
    movq $2, %RDX
    // stack
    // В регистрах RSI и RDX вам даны два числа, ваша задача поменять их местами, 
    // как и в одном из предыдущих заданий. Но добавляется условие, что все остальные регистры 
    // общего назначения должны остаться неизменными. Т. е. если вы используете какой-то 
    // регистр общего назначения кроме RSI и RDX, то вы должны сохранить и затем восстановить 
    // сохраненное значение регистра (ну или не пользоваться этими регистрами вовсе).
    pushq %RSI
    pushq %RDX
    popq %RSI
    popq %RDX
   
   
    //А теперь ваша задача написать функцию swap. Функция принимает на вход два указателя на 
    //64-битные числа (в регистрах RDI и RSI) и должна обменять значения в памяти.
    //ВАЖНО: ﻿функция принимает указатели на значения, которые нужно обменять, а не сами значения, 
    //т. е. не забудьте, что чтобы добраться до значений указатели нужно разыменовать. 
    swap:
        movq (%rdi), %r8
        #movq (%rsi), (%rdi)    # movq не может копировать из памяти в память
        movq (%rsi), %r9
        movq %r8, (%rsi)
        movq %r9, (%rdi)
        retq
   
   
    xorq  %rax, %rax
    ret
